name: Monthly Job - Check customer secret rotation

on: 
  workflow_dispatch:

env:
  AZURE_CREDENTIALS: >
    {
      "clientId": "${{ secrets.ARM_CLIENT_ID }}",
      "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
      "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
      "tenantId": "${{ secrets.ARM_TENANT_ID }}"
    }
  
jobs: 
  get-customertfstate-files:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ env.AZURE_CREDENTIALS }}

    - name: Azure CLI collect terraform state files
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          az storage blob list -c tfstate-customeronboarding --account-name sacustomeronboarding0000 --query "[].name" -o json > $GITHUB_WORKSPACE/tfstatefiles.json
    
    - name: Import terraform state files to output
      id: set-matrix
      run: |
        JSON=$(cat $GITHUB_WORKSPACE/tfstatefiles.json)
        JSON="${JSON//'%'/'%25'}"
        JSON="${JSON//$'\n'/'%0A'}"
        JSON="${JSON//$'\r'/'%0D'}"
        echo "::set-output name=matrix::${JSON}"
    - name:
      run: echo "${{ steps.set-matrix.outputs.matrix }}"
        
  re-run-customer-deployments:
    needs: get-customertfstate-files
    runs-on: ubuntu-latest
    outputs:
      customer_tenant_id: ${{ steps.terraformoutput.outputs.customer_tenant_id }}
      tenant_repos: ${{ steps.reposearch.outputs.tenant_repos }}
      application_key_secret: ${{ steps.appsecret.outputs.application_key_secret }}
      repo_format: ${{ steps.repoformat.outputs.repo_format }}

    strategy:
      fail-fast: false
      matrix:
        tfstate_file: ${{fromJson(needs.get-customertfstate-files.outputs.matrix)}}
    defaults:
      run:
        working-directory: ./Azure-Managed-Service-Customer-Onboarding

    env:
      ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}

    steps:
      - name: Clone Repo
        uses: actions/checkout@v2
      
      - name: Set customer tenant domain as env
        run: echo "CUSTOMERTENANTDOMAIN=$(echo ${{ matrix.tfstate_file }} | cut -d '.' -f 1)" >> $GITHUB_ENV


      - name: Setup Terraform - Wrapper False
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init -backend-config=storage_account_name=${{secrets.STORAGE_ACCOUNT}} -backend-config=key=${{ matrix.tfstate_file }}
      
      - name: Terraform Output - Get customer_tenant_id
        id: terraformoutput
        run: |
          customer_tenant_id=$(terraform output customer_tenant_id)
          echo "::set-output name=customer_tenant_id::$customer_tenant_id"
      
      - name: Terraform Validate
        run: terraform validate
      
      - name: Setup Terraform - Wrapper True
        uses: hashicorp/setup-terraform@v1
         
      - name: Terraform Plan
        id: plan 
        run: terraform plan -var customer_tenant_id=${{ steps.terraformoutput.outputs.customer_tenant_id }} -detailed-exitcode
        continue-on-error: true
      
      - name: Check for Plan failure
        if: steps.plan.outputs.exitcode == 1
        run: exit 1
        
      - name: Terraform Apply
        if: steps.plan.outputs.exitcode == 2
        run: terraform apply -var customer_tenant_id=${{ steps.terraformoutput.outputs.customer_tenant_id }} --auto-approve 

      - name: Terraform Output - Get latest app secret
        # if: steps.plan.outputs.exitcode == 2
        id: appsecret
        run: |
          application_key_secret=$(terraform output application_key_secret)
          echo "::set-output name=application_key_secret::$application_key_secret"

      - name: Find GitHub repos specific to this tenant
        # if: steps.plan.outputs.exitcode == 2
        id: reposearch
        run: | 
          tenant_repos="$(gh repo list kevinbasoftcat --json name --jq '.[] | select(.name | startswith("${{ env.CUSTOMERTENANTDOMAIN }}")) | .[]' > $GITHUB_WORKSPACE/repo_output.json)"
          echo "::set-output name=tenant_repos::$tenant_repos"
        env: 
          GITHUB_TOKEN: ${{ secrets.PAT }}
      
      - name: Format repos found into correct JSON
        # if: steps.plan.outputs.exitcode == 2
        id: repoformat
        run: |
          repo_format="$(cat $GITHUB_WORKSPACE/repo_output.json | jq -R -s -c 'split("\n")[:-1]')"
          echo "::set-output name=repo_format::$repo_format"
      
      - name: Display output
        # if: steps.plan.outputs.exitcode == 2
        run: echo "${{ steps.repoformat.outputs.repo_format }}"

  update-repo-secret:
    needs: re-run-customer-deployments
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tenant_repos: ${{fromJson(needs.re-run-customer-deployments.outputs.repo_format)}}

    steps:
      - name: Set repo secret
        run: gh secret set Test --body ${{ needs.re-run-customer-deployments.outputs.application_key_secret }} --repo kevinbasoftcat/${{ matrix.tenant_repos }}

      # - name: Display repos
      #   run: echo "${{ steps.reposearch.outputs.tenant_repos }}"

